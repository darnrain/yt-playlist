#!/data/data/com.termux/files/usr/bin/bash 

# yt-playlist Termux

if [ "$EUID" == "0" ]
then echo "Please do not run as root."
exit
fi
external_arguments1=$1
external_arguments2="$2"
yt_playlist_home_dir="${HOME}/.config/yt-playlist"
audio_dir="/sdcard/Music"
video_dir="/sdcard/Videos"
show_audio_dir=$(printf '"%s" \n' "Saved to: /sdcard/Music/")
show_video_dir=$(printf '"%s" \n' "Saved to: /sdcard/Videos/")
tmp_dir="/data/data/com.termux/files/usr/tmp"
yt_video_number="1:100"
version="v2.44_test"

#mainmenu

function main_menu_function ()
{
	clear
	if [ -n "$yt_playlist_id" ]
	then
	echo "${yt_playlist_title}"
	else
	echo "No channel/playlist/album loaded."
        echo "Playlist menu to load."
        fi
        if [ -n "$yt_playlist_total" ]
	then
        echo "$yt_playlist_total"
        fi
	if [ -n "$jemalloc" ]
	then
        echo "jemalloc enabled."
        fi
	if [ -n "$mpv_log_file" ]
	then
        echo "mpv log file enabled."
        fi
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        cat "${tmp_dir}/count_down_timer.txt"
        fi
        echo ""
echo -ne "== Main Menu ==
1) Play SD menu.
2) Play SD bookmark menu.
3) Play YTMusic menu.
4) Playlist menu.
5) Billboard charts menu.
6) Download.
7) Sleep timer.
8) Check for update.
q) Quit.
Choose an option:  "
    read -r ans
    case $ans in
   1)
        if [ "$yt_playlist_id" = "7807897890789078907807" ]
        then
        echo "Not a channel/playlist/album."
        sleep 0.8
        main_menu_function
        fi
        if [ -n "$yt_playlist_id" ]
        then
        play_sd_menu_function
        else
        echo "No channel/playlist/album loaded."
	sleep 0.8
        main_menu_function
        fi
        ;;
   2)   
        play_sd_bookmark_menu_function
        ;;
   3)   
        play_music_menu_function
        ;;
   4)
        playlist_menu_function
        ;;
   5)
        billboard_menu_function
        ;;
   6)
        if [ "$yt_playlist_id" = "7807897890789078907807" ]
        then
        echo "Not a channel/playlist/album."
        sleep 0.8
        main_menu_function
	fi
        if [ -n "$yt_playlist_id" ]
        then
        printf "\n"
        printf "Download menu. \n"
        printf "1=Audio or 2=Audio/Video \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        clear
        printf "Audio Format? \n"
        printf "1=m4a 128kbps 44.1kHz or 2=opus 128kbps 48kHz \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        audio_format="140/ba"
        else
        audio_format="251/ba"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        main_menu_function
        fi
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        main_menu_function
        fi
        yt_playlist_download=$(echo "${yt_playlist_results}" | fzf --reverse --header="Download audio: ${yt_playlist_vanilla_title}" --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}' | tr -s ';[:space:]' '[ *]' | sed 's/ /,/g' | sed '$ s/.$//')
        if [ -n "$yt_playlist_download" ]
        then
	if [[ "$yt_playlist_id" = UC* ]]
	then
        clear
        echo "Downloading line: $yt_playlist_download"
        yt-dlp -N4 -x --playlist-items "$yt_playlist_download" -f "$audio_format" -o "${audio_dir}/${yt_playlist_vanilla_title}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata  "https://www.youtube.com/channel/${yt_playlist_id}/videos"
        else
        echo "Downloading line: $yt_playlist_download"
        yt-dlp -N4 -x --playlist-items "$yt_playlist_download" -f "$audio_format" -o "${audio_dir}/${yt_playlist_vanilla_title}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "https://www.youtube.com/playlist?list=$yt_playlist_id"
        fi
        clear
        echo "Saved to: ${audio_dir}/${yt_playlist_vanilla_title}/"
        sleep 3
        main_menu_function
        else
        main_menu_function
	fi
        else
        clear
        printf "Audio/Video format? \n"
        printf "1=1080p h264/vp9 60/30 FPS or 2=720p h264 30 FPS \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        format="bestvideo[height=1080][vcodec^=avc1]+ba/bestvideo[height=1080][vcodec^=vp09]+ba"
        else
        format="22/18/b"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        main_menu_function
        fi
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        main_menu_function
        fi
        yt_playlist_download=$(echo "${yt_playlist_results}" | fzf --reverse --header="Download audio: ${yt_playlist_vanilla_title}" --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}' | tr -s ';[:space:]' '[ *]' | sed 's/ /,/g' | sed '$ s/.$//')
        if [ -n "$yt_playlist_download" ]
        then
        if [[ "$yt_playlist_id" = UC* ]]
	then
        clear
        echo "Downloading line: $yt_playlist_download"
        yt-dlp -N4 --playlist-items "$yt_playlist_download" -f "$format" -o "${video_dir}/${yt_playlist_vanilla_title}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata  "https://www.youtube.com/channel/${yt_playlist_id}/videos"
        else
        echo "Downloading line: $yt_playlist_download"
        yt-dlp -N4 --playlist-items "$yt_playlist_download" -f "$format" -o "${video_dir}/${yt_playlist_vanilla_title}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "https://www.youtube.com/playlist?list=$yt_playlist_id"
        fi
        clear
        echo "Saved to: ${video_dir}/${yt_playlist_vanilla_title}/"
        sleep 3
        main_menu_function
        else
        main_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        main_menu_function
	fi
        else
        echo "No channel/playlist/album loaded."
        sleep 0.8
        main_menu_function
        fi
        ;;
   7)
        printf " \n"
        printf "Sleep timer menu. \n"
        printf "1=Enable or 2=Disable \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        clear
        printf "1=Hours or 2=Minutes \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        clear
        printf "Enter hours to sleep: \n"
        read answer
        if [ -n "$answer" ]
        then
        if ! [[ "$answer" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        main_menu_function
        fi
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        rm "${tmp_dir}/stop_sleep_timer"
	fi
        touch "${tmp_dir}/sleep_timer_running"
        sec="0"
        min="0"
        hour="$answer"
        sleep_time="${answer}h"
        sleep_timer_function &
        sleep_timer_count_down_function &
        main_menu_function
        else
        clear
        echo "Please enter sleep time."
        sleep 0.8
        main_menu_function
        fi
        else
        clear
        printf "Enter minutes to sleep: \n"
        read answer
        if [ -n "$answer" ]
        then
        if ! [[ "$answer" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        main_menu_function
        fi
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        rm "${tmp_dir}/stop_sleep_timer"
	fi
        touch "${tmp_dir}/sleep_timer_running"
        sec="0"
        min="$answer"
        hour="0"
        sleep_time="${answer}m"
        sleep_timer_function &
        sleep_timer_count_down_function &
        main_menu_function
        else
        echo "Please enter sleep time."
        sleep 0.8
        main_menu_function
  fi
fi

        else
        echo "Please choose an option."
        sleep 0.8
        main_menu_function
        fi
        else
        if [ -n "$sleep_time" ]
        then
        stop_sleep_timer_function
        main_menu_function
        else
        printf "\n"
        printf "Sleep timer not enabled. \n"
        sleep 0.8
        main_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        main_menu_function
        fi
        ;;
   8)
        if command -v less >/dev/null && command -v curl >/dev/null
        then
        printf "\n"
        printf "Update menu \n"
        printf "1=Check for update. or 2=View change log. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        version_check=$(curl -s https://raw.githubusercontent.com/darnrain/yt-playlist/main/latest_version.txt -L 2>&1)
        echo ""
        echo "Installed version: $version"
        echo "Latest version: $version_check"
        printf "Download yt-playlist from. \n"
        printf "https://github.com/darnrain/yt-playlist \n"
        printf "git clone https://github.com/darnrain/yt-playlist.git \n"
        printf " \n"
        printf "%s " "Press enter to continue" 
        read ans
        main_menu_function
        else
        curl -s https://raw.githubusercontent.com/darnrain/yt-playlist/main/change_log.txt -L 2>&1 | less
        main_menu_function
        fi
        else
        echo "Please choose an option."
        sleep 0.8
        main_menu_function
        fi
        else
        echo "Please install less and curl to run."
        sleep 2
        main_menu_function
        fi
        ;;
    q)
        quit_function
        ;;
    Q)
        quit_function
        ;;
 debug)
        printf " \n"
        printf "Debug menu. \n"
        printf "1=Internet status. or 2=mpv log file. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        clear
        check_internet_status_function
	if [ -n "$internet_status" ]
	then
        echo "Internet is on."
        sleep 2
        main_menu_function
        else
        echo "Internet is off."
        sleep 2
        main_menu_function
        fi
        else
        clear
        mpv_log_file_on_funciton
        mpv_log_file="yes"
        clear
        echo "mpv log file is enabled."
        echo "play video or audio to gen log."
        echo "~/.config/yt-playlist/mpv_log_file.txt"
        echo "Note: enabling again will delete"
        echo "last mpv_log_file.txt created."
        echo ""
        printf "%s " "Press enter to continue"
        read ans
        main_menu_function
        fi
        else
        echo "Please enter an option."
        sleep 0.8
        main_menu_function
        fi
        ;;      
   *)
        echo "Wrong option."
        sleep 0.3
        main_menu_function
        ;;
    esac
}

#playsdmenu

function play_sd_menu_function ()
{
	clear
        clean_up_function 
	if [ -n "$yt_playlist_id" ]
	then
	echo "${yt_playlist_title}"
        fi
        if [ -n "$yt_playlist_total" ]
	then
        echo "$yt_playlist_total"
        fi
        play_sd_menu_bookmark_menu_hud_function
        echo ""
echo -ne "== Play SD Menu ==
1) Play + shuffle + inf loop.
2) Play once + shuffle.
3) Play from a start postion.
4) Play a custom playlist.
5) Open in NewPipe.
6) Enable Audio aac 128kbps 44.1kHz.
7) Enable Audio opus 128kbps 48kHz.
8) Enabled resume playback.
9) Enter number of music/video results.
m) Main menu.
Choose an option:  "
    read -r ans
    case $ans in
    1)
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        echo "${yt_playlist_results}" | awk '{print $2}' > "${tmp_dir}/yt_playlist_url.txt"
        echo "============================"
        echo "Play + shuffle + inf loop."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        ;;
    2)
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        echo "${yt_playlist_results}" | awk '{print $2}' > "${tmp_dir}/yt_playlist_url.txt"
        echo "============================"
        echo "Play once + shuffle."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        ;;
    3)
        printf "\n"
        printf "Play from a start position menu. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        yt_playlist_start=$(echo "${yt_playlist_results}" | fzf --reverse --header="Play in sequence + inf loop: ${yt_playlist_vanilla_title}" --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        echo "${yt_playlist_results}" | awk '{print $2}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "Playing $yt_playlist_start through $yt_playlist_total_number"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        else
        play_sd_menu_function
        fi
        else
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        yt_playlist_start=$(echo "${yt_playlist_results}" | fzf --reverse --header="Play in sequence once: ${yt_playlist_vanilla_title}" --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        echo "${yt_playlist_results}" | awk '{print $2}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "Playing $yt_playlist_start through $yt_playlist_total_number"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        else
        play_sd_menu_function
  fi
fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_menu_function
        fi
        ;;
    4)
        printf "\n"
        printf "Play a custom playlist menu. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        yt_playlist_custom=$(echo "${yt_playlist_results}" | fzf --reverse --header="Play in sequence + inf loop: ${yt_playlist_vanilla_title}" --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_custom" ]
        then
        yt_playlist_custom_number=$(echo "$yt_playlist_custom" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "$yt_playlist_custom" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "$yt_playlist_custom" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "$yt_playlist_custom" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_menu_function
  fi
fi
        yt_playlist_custom_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "Playing total: $yt_playlist_custom_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        else
        play_sd_menu_function
        fi
        else
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        yt_playlist_custom=$(echo "${yt_playlist_results}" | fzf --reverse --header="Play in sequence once: ${yt_playlist_vanilla_title}" --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_custom" ]
        then
        yt_playlist_custom_number=$(echo "$yt_playlist_custom" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "$yt_playlist_custom" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "$yt_playlist_custom" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "$yt_playlist_custom" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_menu_function
  fi
fi
        yt_playlist_custom_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "${yt_playlist_title}"
        echo "$yt_playlist_total"
        echo "Playing total: $yt_playlist_custom_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo "" 
        touch "${tmp_dir}/mpv_video_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_menu_function
        else
        play_sd_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        play_sd_menu_function
        fi
        ;;
    5)
	if [[ "$yt_playlist_id" = UC* ]]
	then
        am start -a android.intent.action.VIEW -d "https://youtube.com/channel/${yt_playlist_id}" "org.schabi.newpipe"
        play_sd_menu_function
        else
        am start -a android.intent.action.VIEW -d "https://youtube.com/playlist?list=${yt_playlist_id}" "org.schabi.newpipe"
        play_sd_menu_function
        fi
        ;;
    6)
        mpv_video_m4a_function
        play_sd_menu_function
        ;;
    7)
        mpv_video_opus_function
        play_sd_menu_function
        ;;
    8)
        printf "\n"
        printf "Resume playback. \n"
        printf "1=Enable or 2=Disable \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        resume_playback_on_function
        play_sd_menu_function
        else
        resume_playback_off_function
        play_sd_menu_function
        fi
        else
        echo "Please choose an option."
        sleep 0.8
        play_sd_menu_function
        fi
        ;;
    9)
        printf " \n"
        printf "Enter music/video results number: \n"
        read yt_video_number
        if [ -n "$yt_video_number" ]
        then
        if ! [[ "$yt_video_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        play_sd_menu_function
        else
        yt_video_number="1:${yt_video_number}"
        fi
        unset yt_playlist_results
        results_function
        if [ -z "$yt_playlist_results" ]
	then
        clear
        echo "No results found"
        sleep 0.8
        play_sd_menu_function
        fi
        play_sd_menu_function
        else
        echo "Please enter a number."
        sleep 0.8
        play_sd_menu_function
        fi
        ;;
    m)
        main_menu_function
        ;;
    M)
        main_menu_function
        ;;
    *)
        echo "Wrong option."
        sleep 0.3
        play_sd_menu_function
        ;;
    esac
}

#playmusicmenu

function play_music_menu_function ()
{
	clear
        clean_up_function
        music_menu_hud_function
        echo ""
echo -ne "== Play YTMusic Menu ==
1) Play + shuffle + inf loop.
2) Play once + shuffle.
3) Play from a start position.
4) Play a custom playlist.
5) Search for music.
6) Enable Audio aac 128kbps 44.1kHz.
7) Enable Audio opus 128kbps 48kHz.
8) Delete duplicates.
9) Delete music.
m) Main menu.
Choose an option:  "
    read -r ans
    case $ans in
    1)
        clear
        cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_music_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        yt_playlist_music_total="Total songs: $yt_playlist_music_total"
        echo "============================"
        echo "Play + shuffle + inf loop."
        echo "============================"
        echo "$yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --loop-playlist=inf --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        ;;
    2)
        clear
        cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_music_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        yt_playlist_music_total="Total songs: $yt_playlist_music_total"
        echo "============================"
        echo "Play once + shuffle."
        echo "============================"
        echo "$yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        ;;
    3)
        printf "\n"
        printf "Play from a start position menu. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        yt_playlist_start=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence + inf loop." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_music_total=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "Playing $yt_playlist_start through $yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --loop-playlist=inf --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        else
        play_music_menu_function
        fi
        else
        yt_playlist_start=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence once." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_music_total=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "Playing $yt_playlist_start through $yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --loop-playlist=no --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        else
        play_music_menu_function
  fi
fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_music_menu_function
        fi
        ;;
    4)
        printf "\n"
        printf "Play a custom playlist menu. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        yt_playlist_music=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence + inf loop." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_music" ]
        then
        clear
        yt_playlist_custom_number=$(echo "${yt_playlist_music}" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "$yt_playlist_music" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "$yt_playlist_music" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "$yt_playlist_music" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_menu_function
  fi
fi
        yt_playlist_music_total=$(echo "${yt_playlist_music}" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "Playing total: $yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --loop-playlist=inf --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        else
        play_music_menu_function
        fi
        else
        yt_playlist_music=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence once." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_music" ]
        then
        clear
        yt_playlist_custom_number=$(echo "${yt_playlist_music}" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "$yt_playlist_music" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "$yt_playlist_music" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "$yt_playlist_music" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_menu_function
  fi
fi
        yt_playlist_music_total=$(echo "${yt_playlist_music}" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "Playing total: $yt_playlist_music_total"
        echo "============================"
        music_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo "" 
        touch "${tmp_dir}/mpv_music_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_music_arguments[@]} --resume-playback=no --save-position-on-quit=no --loop-playlist=no --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_music_menu_function
        else
        play_music_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        play_music_menu_function
        fi
        ;;
    5)
        printf " \n"
        printf "Enter music search: \n"
        read ytm_search
        if [ -n "$ytm_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read ytm_search_number
        if [ -n "$ytm_search_number" ]
        then
        if ! [[ "$ytm_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        play_music_menu_function
        else
        ytm_search_number="1:${ytm_search_number}"
        fi
        clear
        printf "Fast = Search phrase in results. \n"
        printf "Slow = Artist name in results. \n"
        printf " \n"
        printf "1=Fast search or 2=Slow search \n"
        read search_speed
        if [ -n "$search_speed" ]
        then
        if [ "$search_speed" != "${search_speed#[1]}" ]
        then
        fast_music_search_function
        else
        slow_music_search_function
        fi
        else
        echo "Please enter an option."
        sleep 0.8
        play_music_menu_function
        fi
        if [ -z "$ytm_music_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        play_music_menu_function
        else
        play_music_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        play_music_menu_function
        fi
        else
        echo "Please enter a music search."
        sleep 0.8
        play_music_menu_function
        fi
        ;;
    6)
        mpv_music_m4a_function
        play_music_menu_function
        ;;
    7)
        mpv_music_opus_function
        play_music_menu_function
        ;;
    8)
        printf " \n"
        printf "Delete duplicates, from music library? [y/N] "
        read answer
        if [ "$answer" != "${answer#[yY]}" ]
        then
        clear
        music_count=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | wc -l)
        echo "There are $music_count in music library."
        sleep 3
        awk -F'-' '!seen[$2]++' "${yt_playlist_home_dir}/yt-playlist_music.txt" > "${tmp_dir}/yt-playlist_music.txt"
        mv "${tmp_dir}/yt-playlist_music.txt" "${yt_playlist_home_dir}/yt-playlist_music.txt"
        sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_music.txt"
        music_count=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | wc -l)
        echo ""
        echo "There are now $music_count in music library."
        sleep 3
        play_music_menu_function
        else
        clear
        echo "No changes were made."
        sleep 1
        play_music_menu_function
        fi
        ;;
    9)
        delete_music=$(cat "${yt_playlist_home_dir}/yt-playlist_music.txt" | nl -n"ln" -w2 -s " " | tac | nl -n"ln" -w2 -s " "  | fzf --reverse --header="Delete music." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}' | tr -s ';[:space:]' '[ *]' | sed 's/ /d;/g' | sed '$ s/.$//')
        if [ -n "$delete_music" ]
	then
        sed -i'' "$delete_music" "${yt_playlist_home_dir}/yt-playlist_music.txt"
        play_music_menu_function
        else
        play_music_menu_function
        fi
        ;;
    m)
        main_menu_function
        ;;
    M)
        main_menu_function
        ;;
    *)
        echo "Wrong option."
        sleep 0.3
        play_music_menu_function
        ;;
    esac
}

#bookmarkmenu

function play_sd_bookmark_menu_function ()
{
	clear
        clean_up_function
        play_sd_menu_bookmark_menu_hud_function
        echo ""
echo -ne "== Play SD Bookmark Menu ==
1) Play + shuffle + inf loop.
2) Play once + shuffle.
3) Play from a start postion.
4) Play a custom playlist.
5) Enable Audio aac 128kbps 44.1kHz.
6) Enable Audio opus 128kbps 48kHz.
7) Enable resume playback.
8) Delete bookmarks.
m) Main menu.
Choose an option:  "
    read -r ans
    case $ans in
    1)
        clear
        cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        echo "============================"
        echo "Play + shuffle + inf loop."
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        ;;
    2)
        clear
        cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        echo "============================"
        echo "Play once + shuffle."
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=yes --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        ;;
    3)
        printf "\n"
        printf "Play from a start position menu. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        yt_playlist_start=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence + inf loop." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_bookmark_number=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "Playing $yt_playlist_start through $yt_playlist_bookmark_number"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        else
        play_sd_bookmark_menu_function
        fi
        else
        yt_playlist_start=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence once." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $1}')
        if [ -n "$yt_playlist_start" ]
        then
        cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | awk '{print $1}' > "${tmp_dir}/yt_playlist_url.txt"
        sed -i'' "1i header_line" "${tmp_dir}/yt_playlist_url.txt"
        yt_playlist_bookmark_number=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "Playing $yt_playlist_start through $yt_playlist_bookmark_number"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=no --playlist-start="$yt_playlist_start" --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        else
        play_sd_bookmark_menu_function
  fi
fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_sd_bookmark_menu_function
        fi
        ;;
    4)
        printf "\n"
        printf "Play a custom playlist. \n"
        printf "1=Sequence + inf loop. or 2=Sequence once. \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        yt_playlist_bookmark=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence + inf loop." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_bookmark" ]
        then
        clear
        yt_playlist_custom_number=$(echo "${yt_playlist_bookmark}" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "${yt_playlist_bookmark}" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "${yt_playlist_bookmark}" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "${yt_playlist_bookmark}" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_bookmark_menu_function
  fi
fi
        yt_playlist_bookmark_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence + inf loop."
        echo "============================"
        echo "Playing total: $yt_playlist_bookmark_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo ""
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=inf --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        else
        play_sd_bookmark_menu_function
        fi
        else
        yt_playlist_bookmark=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Play in sequence once." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        if [ -n "$yt_playlist_bookmark" ]
        then
        clear
        yt_playlist_custom_number=$(echo "${yt_playlist_bookmark}" | wc -l)
        if [ "$yt_playlist_custom_number" -eq "1" ]
        then
        echo "${yt_playlist_bookmark}" > "${tmp_dir}/yt_playlist_url.txt"
        else
        clear
        printf "Play in reverse order? \n"
        printf "1=yes or 2=no \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        echo "${yt_playlist_bookmark}" | tac > "${tmp_dir}/yt_playlist_url.txt"
        else
        echo "${yt_playlist_bookmark}" > "${tmp_dir}/yt_playlist_url.txt"
        fi
        else
        echo "Please choose an option."
	sleep 0.8
        play_bookmark_menu_function
  fi
fi
        yt_playlist_bookmark_total=$(cat "${tmp_dir}/yt_playlist_url.txt" | wc -l)
        clear
        echo "============================"
        echo "Play in sequence once."
        echo "============================"
        echo "Playing total: $yt_playlist_bookmark_total"
        echo "============================"
        play_sd_menu_bookmark_menu_hud_function
        echo "============================"
        echo "Please wait."
        echo "" 
        touch "${tmp_dir}/mpv_bookmark_running"
        pulse_function mpv ${mpv_log_file_arguments[@]} ${mpv_video_arguments[@]} ${resume_playback_arguments[@]} --loop-playlist=no --shuffle=no --playlist="${tmp_dir}/yt_playlist_url.txt"
        play_sd_bookmark_menu_function
        else
        play_sd_bookmark_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        play_sd_bookmark_menu_function
        fi
        ;;
    5)
        mpv_video_m4a_function
        play_sd_bookmark_menu_function
        ;;
    6)
        mpv_video_opus_function
        play_sd_bookmark_menu_function
        ;;
    7)
        printf "\n"
        printf "Resume playback. \n"
        printf "1=Enable or 2=Disable \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        resume_playback_on_function
        play_sd_bookmark_menu_function
        else
        resume_playback_off_function
        play_sd_bookmark_menu_function
        fi
        else
        echo "Please choose an option."
        sleep 0.8
        play_sd_bookmark_menu_function
        fi
        ;;
    8)
        delete_bookmark=$(cat "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" | nl -n"ln" -w2 -s " " | tac | nl -n"ln" -w2 -s " "  | fzf --reverse --header="Delete bookmarks." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}' | tr -s ';[:space:]' '[ *]' | sed 's/ /d;/g' | sed '$ s/.$//')
        if [ -n "$delete_bookmark" ]
	then
        sed -i'' "$delete_bookmark" "${yt_playlist_home_dir}/yt-playlist_bookmark.txt"
        play_sd_bookmark_menu_function
        else
        play_sd_bookmark_menu_function
        fi
        ;;
    m)
        main_menu_function
        ;;
    M)
        main_menu_function
        ;;
    *)
        echo "Wrong option."
        sleep 0.3
        play_sd_bookmark_menu_function
        ;;
    esac
}

#playlistmenu

function playlist_menu_function ()
{
	clear
	if [ -n "$yt_playlist_id" ]
	then
	echo "${yt_playlist_title}"
	else
	echo "No channel/playlist/album loaded."
        fi
        if [ -n "$yt_playlist_total" ]
	then
        echo "$yt_playlist_total"
        fi
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        cat "${tmp_dir}/count_down_timer.txt"
        fi
        echo ""
echo -ne "== Playlist Menu ==
1) Favorites library.
2) History library.
3) Save or delete.
4) Paste a url.
5) YTMusic Album search.
6) YTMusic Playlist search [1].
7) YTMusic Playlist search [2].
8) YT Playlist search.
9) YT Channel search.
10) Get channel playlists.
11) View url.
m) Main menu.
Choose an option:  "
    read -r ans
    case $ans in
    1)
        yt_playlist_id=$(cat "${yt_playlist_home_dir}/yt-playlist_favorites.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Favorites library." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        ;;
    2)
        yt_playlist_id=$(cat "${yt_playlist_home_dir}/yt-playlist_history.txt" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="History library." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        ;;
    3)
        printf "\n"
        printf "Save or delete menu. \n"
        printf "1=Save or 2=Delete \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[2]}" ]
        then
        clear
        printf "Delete menu \n"
        printf "1=Favorites or 2=History \n"
        read answer
        if [ -n "$answer" ]
        then
        if [ "$answer" != "${answer#[1]}" ]
        then
        unset yt_playlist_title
        unset yt_playlist_id
        delete_playlist=$(cat "${yt_playlist_home_dir}/yt-playlist_favorites.txt" | nl -n"ln" -w2 -s " " | tac | nl -n"ln" -w2 -s " "  | fzf --reverse --header="Delete favorites." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}' | tr -s ';[:space:]' '[ *]' | sed 's/ /d;/g' | sed '$ s/.$//')
        sed -i'' "$delete_playlist" "${yt_playlist_home_dir}/yt-playlist_favorites.txt"
        playlist_menu_function
        else
        unset yt_playlist_title
        unset yt_playlist_id
        delete_history=$( cat "${yt_playlist_home_dir}/yt-playlist_history.txt" | nl -n"ln" -w2 -s " " | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Delete history." --bind ctrl-a:select-all,ctrl-d:deselect-all -m --with-nth=1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}' | tr -s ';[:space:]' '[ *]' | sed 's/ /d;/g' | sed '$ s/.$//')
        sed -i'' "$delete_history" "${yt_playlist_home_dir}/yt-playlist_history.txt"
        playlist_menu_function
        fi
        else
        echo "Please choose an option."
        sleep 0.8
        playlist_menu_function
        fi
        else
        if [ "$yt_playlist_id" = "7807897890789078907807" ]
        then
        echo "Not a channel/playlist/album."
        sleep 0.8
        playlist_menu_function
        fi
        if [ -n "$yt_playlist_id" ]
        then
        if grep -q "$yt_playlist_id" "${yt_playlist_home_dir}/yt-playlist_favorites.txt"
        then
        echo "Already saved to favorites."
        sleep 1
        playlist_menu_function
        else
        echo "Saving: $yt_playlist_title"
        echo "$yt_playlist_id" "${yt_playlist_title}" >> "${yt_playlist_home_dir}/yt-playlist_favorites.txt"
        sleep 0.8
        echo "Saved to favorites."
        sleep 1
        playlist_menu_function
        fi
        else
        echo "No channel loaded."
        sleep 0.8
        playlist_menu_function
  fi
fi
        else
        echo "Please choose an option."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    4)
        clear
        printf "Supported urls are: \n"
        printf "https://music.youtube.com/playlist?list= \n"
        printf "https://music.youtube.com/channel/ \n"
        printf "https://youtube.com/playlist?list= \n"
        printf "https://youtube.com/channel/ \n"
        printf "https://youtube.com/@ \n"
        printf "https://youtube.com/c/ \n"
        printf "https://youtube.com/user/ \n"
        printf "https://www.youtube.com/watch?v= \n"
        printf "https://youtu.be/ \n"
        printf "Paste a url: \n"
        read yt_paste_url
	if [[ "${yt_paste_url}" = *youtube* ]]
        then
	if [[ "${yt_paste_url}" = *playlist* ]]
        then
        paste_playlist_url_function
        title_function
        playlist_menu_function
        else
	if [[ "${yt_paste_url}" = *channel* ]]
        then
        paste_channel_url_function
        title_function
        playlist_menu_function
        else
	if [[ "${yt_paste_url}" = *@* ]]
        then
        paste_channel_url_function
        title_function
        playlist_menu_function
        else
	if [[ "${yt_paste_url}" = *c/* ]]
        then
        yt_paste_url=$(echo "$yt_paste_url" | sed -e 's/c\//@/g')
        paste_channel_url_function
        title_function
        playlist_menu_function
        else
	if [[ "${yt_paste_url}" = *user/* ]]
        then
        yt_paste_url=$(echo "$yt_paste_url" | sed -e 's/user\//@/g')
        paste_channel_url_function
        title_function
        playlist_menu_function
        else
	if [[ "${yt_paste_url}" = *watch* ]]
        then
        paste_video_url_function
        playlist_menu_function
        else
        echo "Please paste a supported url."
        sleep 0.8
        playlist_menu_function
   fi
     fi
      fi
    fi
  fi
fi
        else
	if [[ "${yt_paste_url}" = *youtu.be* ]]
        then
        paste_video_url_function
        playlist_menu_function
        else
        echo "Please paste a supported url."
        sleep 0.8
        playlist_menu_function
  fi
fi
        ;;
    5)
        printf " \n"
        printf "Enter Artist or Album name: \n"
        read ytm_search
        if [ -n "$ytm_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read ytm_search_number
        if [ -n "$ytm_search_number" ]
        then
        if ! [[ "$ytm_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        ytm_search_number="1:${ytm_search_number}"
        fi
        ytm_album_search_function
        if [ -z "$ytm_album_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${ytm_album_search}" | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a YTMusic Album." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please enter a album search."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    6)
        printf " \n"
        printf "Enter playlist search: \n"
        read ytm_search
        if [ -n "$ytm_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read ytm_search_number
        if [ -n "$ytm_search_number" ]
        then
        if ! [[ "$ytm_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        ytm_search_number="1:${ytm_search_number}"
        fi
        ytm_playlist_search_[1]_function
        if [ -z "$ytm_playlist_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${ytm_playlist_search}" | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a YTMusic Playlist." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please enter a music playlist search."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    7)
        printf " \n"
        printf "Enter playlist search: \n"
        read ytm_search
        if [ -n "$ytm_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read ytm_search_number
        if [ -n "$ytm_search_number" ]
        then
        if ! [[ "$ytm_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        ytm_search_number="1:${ytm_search_number}"
        fi
        ytm_playlist_search_[2]_function
        if [ -z "$ytm_playlist_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${ytm_playlist_search}" | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a YTMusic Playlist." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please enter a music playlist search."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    8)
        printf " \n"
        printf "Enter playlist search: \n"
        read yt_search
        if [ -n "$yt_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read yt_search_number
        if [ -n "$yt_search_number" ]
        then
        if ! [[ "$yt_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        yt_search_number="1:${yt_search_number}"
        fi
        yt_playlist_search_function
        if [ -z "$yt_playlist_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${yt_playlist_search}" | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a playlist." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please enter a playlist search."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    9)
        printf " \n"
        printf "Enter channel search: \n"
        read yt_search
        if [ -n "$yt_search" ]
        then
        clear
        printf "Enter search results number: \n"
        read yt_search_number
        if [ -n "$yt_search_number" ]
        then
        if ! [[ "$yt_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        yt_search_number="1:${yt_search_number}"
        fi
        yt_channel_search_function
        if [ -z "$yt_channel_search" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${yt_channel_search}" | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a channel." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter search number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please enter a channel search."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
    10)
        if [ "$yt_playlist_id" = "7807897890789078907807" ]
        then
        echo "Not a channel/playlist/album."
        sleep 0.8
        playlist_menu_function
        fi
        if [ -n "$yt_playlist_id" ]
	then
        if [[ "$yt_playlist_id" = UC* ]]
        then
        printf " \n"
        printf "Enter playlist results number: \n"
        read yt_search_number
        if [ -n "$yt_search_number" ]
        then
        if ! [[ "$yt_search_number" =~ ^[0-9] ]]
        then
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        else
        yt_search_number="1:${yt_search_number}"
        fi
        get_channel_playlist_function
        if [ -z "$get_channel_playlist" ]
        then
        clear
        echo "No results found"
        sleep 0.8
        playlist_menu_function
        else
        yt_playlist_id=$(echo "${get_channel_playlist}" | tac | nl -n"ln" -w2 -s " " | fzf --reverse --header="Load a playlist." --with-nth=1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18 | awk '{print $2}')
        title_function
        playlist_menu_function
        fi
        else
        echo "Please enter a number."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "Please load a channel."
        sleep 0.8
        playlist_menu_function
        fi
        else
        echo "No channel loaded."
        sleep 0.8
        playlist_menu_function
        fi
        ;;
   11)
        if [ "$yt_playlist_id" = "7807897890789078907807" ]
        then
        echo "Not a channel/playlist/album."
        sleep 0.8
        playlist_menu_function
        fi
        if [ -n "$yt_playlist_id" ]
        then
	if [[ "$yt_playlist_id" = UC* ]]
        then
        printf "https://www.youtube.com/channel/${yt_playlist_id} \n${yt_playlist_title}" | less
        playlist_menu_function
        else
        printf "https://youtube.com/playlist?list=${yt_playlist_id} \n${yt_playlist_title}" | less
        playlist_menu_function
        fi
        else
        echo "No channel/playlist/album loaded."
	sleep 0.8
        playlist_menu_function
        fi
        ;;
    m)
        main_menu_function
        ;;
    M)
        main_menu_function
        ;;
    *)
        echo "Wrong option."
        sleep 0.3
        playlist_menu_function
        ;;
    esac
}

#billboardmenu

function billboard_menu_function ()
{
	clear
	if [ -n "$yt_playlist_id" ]
	then
	echo "${yt_playlist_title}"
	else
	echo "No channel/playlist/album loaded."
        fi
        if [ -n "$yt_playlist_total" ]
	then
        echo "$yt_playlist_total"
        fi
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        cat "${tmp_dir}/count_down_timer.txt"
        fi
        echo ""
echo -ne "== Billboard charts Menu ==
1) Billboard Hot 100 (1).
2) Billboard Hot 100 (2).
3) Billboard 200.
4) Billboard Global 200.
5) Billboard Artist 100.
6) Rolling Stone's 500 Greatest Songs.
7) 1001 Albums You Must Hear Before You Die.
8) Chartmasters Top Songs.
m) Main menu.
Choose an option:  "
    read -r ans
    case $ans in
    1)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://raw.githubusercontent.com/mhollingshead/billboard-hot-100/main/recent.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    2)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://raw.githubusercontent.com/KoreanThinker/billboard-json/main/billboard-hot-100/recent.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    3)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://raw.githubusercontent.com/KoreanThinker/billboard-json/main/billboard-200/recent.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    4)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://raw.githubusercontent.com/KoreanThinker/billboard-json/main/billboard-global-200/recent.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    5)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://raw.githubusercontent.com/KoreanThinker/billboard-json/main/billboard-artist-100/recent.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    6)  
        if command -v fx >/dev/null && command -v curl >/dev/null
        then
        export FX_THEME=2
        curl -s https://gist.githubusercontent.com/nanotaboada/a90ce99a9bc8ca3c63c0f1dfeb41d41d/raw/55b47f2da187d5d9c9f069d4e354d76ee806eded/songs.json -L 2>&1 | fx
        billboard_menu_function
        else
        echo "Please install fx and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    7)  
        if command -v less >/dev/null && command -v curl >/dev/null
        then
        curl -s https://gist.githubusercontent.com/tatygrassini/6306893/raw/f1511a1a843eddd20f8a26d7809a09854acd4a9e/1001-albums -L 2>&1 | less
        billboard_menu_function
        else
        echo "Please install less and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    8)  
        if command -v less >/dev/null && command -v curl >/dev/null
        then
        curl -s https://raw.githubusercontent.com/darnrain/yt-playlist/main/top_songs/top_songs.txt -L 2>&1 | nl -ba -w2 -s ".  " | less
        billboard_menu_function
        else
        echo "Please install less and curl to run."
        sleep 2
        billboard_menu_function
        fi
        ;;
    m)
        main_menu_function
        ;;
    M)
        main_menu_function
        ;;
    *)
        echo "Wrong option."
        sleep 0.3
        billboard_menu_function
        ;;
    esac
}

#functions

function pulse_function ()
{
pkill -9 pulseaudio
pulseaudio -D --exit-idle-time=600
pactl -- set-sink-volume @DEFAULT_SINK@ 100%
$1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12} ${13} ${14} ${15} ${16} ${17} ${18} ${19} ${20} ${21} ${22} ${23} ${24}
}

function yt_playlist_start_function ()
{
ps_list=$(ps -e)
yt_playlist_count=$(echo "$ps_list" | grep yt-playlist | wc -l)

if [[ "$yt_playlist_count" -gt 1 ]]
then
echo "Error: yt-playlist is already running, or incorrect argument."
exit
else
resume_playback_off_function
mpv_log_file_off_funciton
mpv_music_opus_function
mpv_video_m4a_function
enable_jemalloc_function
clean_up_function
main_menu_function
fi
}

function clean_up_function ()
{
	if test -f "${tmp_dir}/mpv_hd_running"
        then
        rm "${tmp_dir}/mpv_hd_running"
        fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
        rm "${tmp_dir}/mpv_video_running"
        fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        rm "${tmp_dir}/mpv_bookmark_running"
        fi

	if test -f "${tmp_dir}/mpv_music_running"
        then
        rm "${tmp_dir}/mpv_music_running"
        fi

        if test -f "${tmp_dir}/yt_playlist_url.txt"
        then
        rm "${tmp_dir}/yt_playlist_url.txt"
        fi

        if test -f "${yt_playlist_home_dir}/yt-playlist_search_history.txt"
        then
        mv "${yt_playlist_home_dir}/yt-playlist_search_history.txt" "${yt_playlist_home_dir}/yt-playlist_history.txt"
        fi
}

function enable_jemalloc_function ()
{
	if test -f "/usr/lib/libjemalloc.so.1"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib/libjemalloc.so.1'
        else
	if test -f "/usr/lib/libjemalloc.so.2"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib/libjemalloc.so.2'
        else
	if test -f "/usr/lib64/libjemalloc.so.1"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib64/libjemalloc.so.1'
        else
	if test -f "/usr/lib64/libjemalloc.so.2"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib64/libjemalloc.so.2'
        else
	if test -f "/usr/lib/x86_64-linux-gnu/libjemalloc.so.1"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.1'
        else
	if test -f "/usr/lib/x86_64-linux-gnu/libjemalloc.so.2"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2'
        else
	if test -f "/usr/local/lib/libjemalloc.2.dylib"
	then
        jemalloc="yes"
	export LD_PRELOAD='/usr/local/lib/libjemalloc.2.dylib'
        else
        unset jemalloc
  fi
    fi
     fi
      fi
    fi
  fi
fi
}

function quit_function ()
{
printf "\n"
printf "Quit? [y/N] \n"
read answer
if [ -n "$answer" ]
then
if [ "$answer" != "${answer#[yY]}" ]
then
stop_sleep_timer_function
exit
else
main_menu_function
fi
else
main_menu_function
fi
}

function title_notification_function ()
{
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Not available when playing hd video"
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        else
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
  fi
fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
        check_for_artist=$(echo '{ "command": ["get_property", "media-title"] }' | socat - ${tmp_dir}/mpvsocket | cut -d'"' -f4)
        if [[ ! "${check_for_artist}" = *-* ]]
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Please wait, getting atrist & title."
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "$yt_media_title"
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        fi
        else
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "$check_for_artist"
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
    fi
  fi
fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        check_for_artist=$(echo '{ "command": ["get_property", "media-title"] }' | socat - ${tmp_dir}/mpvsocket | cut -d'"' -f4)
        if [[ ! "${check_for_artist}" = *-* ]]
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Please wait, getting atrist & title."
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        notify-send "yt-playlist" "$yt_media_title"
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        fi
        else
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "$check_for_artist"
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
    fi
  fi
fi
	if test -f "${tmp_dir}/mpv_music_running"
        then
        check_for_artist=$(echo '{ "command": ["get_property", "media-title"] }' | socat - ${tmp_dir}/mpvsocket | cut -d'"' -f4)
        if [[ ! "${check_for_artist}" = *-* ]]
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Please wait, getting atrist & title."
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        notify-send "yt-playlist" "$yt_media_title"
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Please wait, getting atrist & title." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_media_title_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        yt_media_title=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(uploader)s - %(title)s" "$yt_media_title_url")
        yt_terminal_title=$(printf '"%s" \n' "$yt_media_title")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        fi
        else
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "$check_for_artist"
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
        else
        yt_terminal_title=$(printf '"%s" \n' "$check_for_artist")
	echo show-text "$yt_terminal_title" | socat - "${tmp_dir}/mpvsocket"
    fi
  fi
fi
}

function check_internet_status_function ()
{
        echo "May take up to ten seconds."
        sleep 1
	if [[ $(ping -c 1 www.github.com 2>/dev/null) == *0%* ]]
        then
        internet_status="yes"
        else
        unset internet_status
        fi
}

function sleep_timer_count_down_function ()
{
	while [ "$hour" -ge 0 ]; do
	while [ "$min" -ge 0 ]; do
	while [ "$sec" -ge 0 ]; do
	echo "Sleep timer: $hour:$min:$sec" > "${tmp_dir}/count_down_timer.txt"
        printf '"%s" \n' "Sleep timer: $hour:$min:$sec"  > "${tmp_dir}/show_sleep_timer.txt"
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        break
        fi
	let "sec=sec-1"
	sleep 1 | sed 's/Terminated//'
	done
	sec=59
	let "min=min-1"
	done
	min=59
	let "hour=hour-1"
	done
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        rm "${tmp_dir}/count_down_timer.txt"
        fi
        if test -f "${tmp_dir}/show_sleep_timer.txt"
        then
        rm "${tmp_dir}/show_sleep_timer.txt"
        fi
}

function stop_sleep_timer_function ()
{
        if test -f "${tmp_dir}/yt-playlist_icons.jpg"
        then
        rm "${tmp_dir}/yt-playlist_icons.jpg"
        fi
        if test -f "${tmp_dir}/sleep_timer_running"
        then
        unset sec
        unset min
        unset hour
        unset sleep_time
        touch "${tmp_dir}/stop_sleep_timer"
        pkill sleep
        pkill sleep
        pkill sleep
        rm "${tmp_dir}/sleep_timer_running"
        fi
}

function sleep_timer_function ()
{
        sleep "$sleep_time" | sed 's/Terminated//'

	if test -f "${tmp_dir}/mpv_hd_running"
        then
        exit
        fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
	secs=$((95))
	while [ $secs -gt 0 ]; do
   	number=$(echo "$secs")
   	echo "'set' 'volume' '$number'" | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        break
	fi
   	sleep 2 | sed 's/Terminated//'
   	: $((secs--))
	done
        fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
	secs=$((95))
	while [ $secs -gt 0 ]; do
   	number=$(echo "$secs")
   	echo "'set' 'volume' '$number'" | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        break
	fi
   	sleep 2 | sed 's/Terminated//'
   	: $((secs--))
	done
        fi

	if test -f "${tmp_dir}/mpv_music_running"
        then
	secs=$((95))
	while [ $secs -gt 0 ]; do
   	number=$(echo "$secs")
   	echo "'set' 'volume' '$number'" | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
        if test -f "${tmp_dir}/stop_sleep_timer"
        then
        break
	fi
   	sleep 2 | sed 's/Terminated//'
   	: $((secs--))
	done
        fi

        if test -f "${tmp_dir}/mpv_video_running"
        then
	echo cycle pause | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
	sleep 2 | sed 's/Terminated//'
	fi

        if test -f "${tmp_dir}/mpv_bookmark_running"
        then
	echo cycle pause | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
	sleep 2 | sed 's/Terminated//'
	fi

        if test -f "${tmp_dir}/mpv_music_running"
        then
	echo cycle pause | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
	sleep 2 | sed 's/Terminated//'
	fi

   	echo "'set' 'volume' '95'" | socat - "${tmp_dir}/mpvsocket" 2>/dev/null
}

function show_date_time_function
{
	get_date_time=$(date +'%a, %b %d, %Y  %r')
	show_date_time=$(printf '"%s" \n' "$get_date_time")
        echo show-text "$show_date_time" | socat - "${tmp_dir}/mpvsocket"
}

function show_count_down_time_function ()
{
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
	if test -f "${tmp_dir}/show_sleep_timer.txt"
	then
	show_count_down_time="$(cat ${tmp_dir}/show_sleep_timer.txt)"
	echo show-text "$show_count_down_time" | socat - "${tmp_dir}/mpvsocket"
	else
        echo '{ "command": ["show-text", "Sleep timer is not enabled." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
	fi
}

function music_download_audio_function ()
{
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "Downloading audio, please wait."
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$music_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
        notify-send "yt-playlist" "Saved to: ${audio_dir}"
        else
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$music_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
        fi
}

function download_audio_function ()
{
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Not available when playing hd video"
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        else
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
  fi
fi

        if test -f "${tmp_dir}/mpv_music_running"
        then
        music_download_audio_function
        exit
        fi

        if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "Downloading audio, please wait."
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$audio_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
        notify-send "yt-playlist" "Saved to: ${audio_dir}"
        else
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$audio_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
  fi
fi

        if test -f "${tmp_dir}/mpv_video_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Downloading audio, please wait."
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$audio_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Saved to: ${audio_dir}"
        else
        echo '{ "command": ["show-text", "Downloading audio, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -x -f "$audio_download_format" -o "${audio_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_audio_dir" | socat - "${tmp_dir}/mpvsocket"
  fi
fi
}

function download_video_function ()
{
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Not available when playing hd video"
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        else
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
  fi
fi
        if test -f "${tmp_dir}/mpv_music_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "Not available when playing music."
        echo '{ "command": ["show-text", "Not available when playing music." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        else
        echo '{ "command": ["show-text", "Not available when playing music." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
  fi
fi

        if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send "yt-playlist" "Downloading video, please wait."
        echo '{ "command": ["show-text", "Downloading video, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -f "$video_download_format" -o "${video_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_video_dir" | socat - "${tmp_dir}/mpvsocket"
        notify-send "yt-playlist" "Saved to: ${video_dir}"
        else
        echo '{ "command": ["show-text", "Downloading video, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -f "$video_download_format" -o "${video_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_video_dir" | socat - "${tmp_dir}/mpvsocket"
  fi
fi

        if test -f "${tmp_dir}/mpv_video_running"
        then
        if command -v notify-send >/dev/null
        then
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Downloading video, please wait."
        echo '{ "command": ["show-text", "Downloading video, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -f "$video_download_format" -o "${video_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_video_dir" | socat - "${tmp_dir}/mpvsocket"
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Saved to: ${video_dir}"
        else
        echo '{ "command": ["show-text", "Downloading video, please wait." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_download_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
	sleep 2
        yt-dlp -N4 --no-warnings --quiet -f "$video_download_format" -o "${video_dir}/%(title)s.%(ext)s" --embed-thumbnail --add-metadata "$yt_playlist_download_url" 2>/dev/null
        echo show-text "$show_video_dir" | socat - "${tmp_dir}/mpvsocket"
  fi
fi
}

function bookmark_function ()
{
        if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        echo '{ "command": ["show-text", "Not available when playing bookmarks" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        if test -f "${tmp_dir}/mpv_music_running"
        then
        echo '{ "command": ["show-text", "Not available when playing music." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        yt_playlist_bookmark_results_url=$(echo '{ "command": ["get_property", "path"] }' | socat - "${tmp_dir}/mpvsocket" | cut -d'"' -f4)
        if grep -q "$yt_playlist_bookmark_results_url" "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" >/dev/null
        then
        echo '{ "command": ["show-text", "Already saved to bookmarks." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        sleep 2
        else
        echo '{ "command": ["show-text", "Saving to bookmarks." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        yt_playlist_bookmark_results=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist -I 1 --print "%(id)s ${bookmark_video_or_music} %(title)s" "$yt_playlist_bookmark_results_url" 2>/dev/null)
        sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" >/dev/null
        echo "https://www.youtube.com/watch?v=${yt_playlist_bookmark_results}" >> "${yt_playlist_home_dir}/yt-playlist_bookmark.txt"
        sleep 2
        echo '{ "command": ["show-text", "Saved to bookmarks." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        fi
}

function favorites_function ()
{
        if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        echo '{ "command": ["show-text", "Not available when playing bookmarks" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        if test -f "${tmp_dir}/mpv_hd_running"
        then
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        if test -f "${tmp_dir}/mpv_music_running"
        then
        echo '{ "command": ["show-text", "Not available when playing music." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        exit
        fi
        if grep -q "$yt_playlist_id" "${yt_playlist_home_dir}/yt-playlist_favorites.txt"
        then
        echo '{ "command": ["show-text", "Channel/Playlist/Album already saved to favorites." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        else
        echo '{ "command": ["show-text", "Saving Channel/Playlist/Album to favorites." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        sed -i'' -e :a -e '/^\n*$/{$d;N;ba' -e '}' "${yt_playlist_home_dir}/yt-playlist_favorites.txt" >/dev/null
        echo "$yt_playlist_id" "${yt_playlist_title}" >> "${yt_playlist_home_dir}/yt-playlist_favorites.txt"
        sleep 4
        echo '{ "command": ["show-text", "Channel/Playlist/Album saved to favorites." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        fi
}

function music_menu_hud_function ()
{
        if [ -n "$mpv_music_m4a" ]
	then
	echo "Audio aac 128kbps 44.1kHz."
        fi
	if [ -n "$mpv_music_opus" ]
	then
	echo "Audio opus 128kbps 48kHz."
        fi
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        cat "${tmp_dir}/count_down_timer.txt"
        fi
}

function play_sd_menu_bookmark_menu_hud_function ()
{
        if [ -n "$mpv_video_m4a" ]
	then
	echo "Audio aac 128kbps 44.1kHz."
        fi
	if [ -n "$mpv_video_opus" ]
	then
	echo "Audio opus 128kbps 48kHz."
        fi
        if [ -n "$resume_playback_on_or_off" ]
	then
        echo "Resume playback enabled."
        else
        echo "Resume playback disabled."
        fi
        if test -f "${tmp_dir}/count_down_timer.txt"
        then
        cat "${tmp_dir}/count_down_timer.txt"
        fi
}

function mpv_video_m4a_function ()
{
mpv_audio_video=( "--ytdl-format=22/18/b --video=no --term-osd-bar" )
mpv_video_m4a="yes"
unset mpv_video_opus
export audio_download_format="140/ba"
export video_download_format="22/18/b"
mpv_video_arguments_function
}

function mpv_video_opus_function ()
{
mpv_audio_video=( "--ytdl-format=251/140/ba --video=no --term-osd-bar" )
unset mpv_video_m4a
mpv_video_opus="yes"
export audio_download_format="251/ba"
export video_download_format="22/18/b"
mpv_video_arguments_function
}

function mpv_video_arguments_function ()
{
mpv_video_arguments=( "${mpv_audio_video}" --config-dir="${yt_playlist_home_dir}" --script-opts=ytdl_hook-try_ytdl_first=yes --term-playing-msg='${media-title}' --cache=yes --cache-secs=120 --demuxer-max-bytes=35M --demuxer-max-back-bytes=5M --sid=no --volume=95 --volume-max=100 --ao=pulse --msg-level=cplayer=no,ffmpeg=no,playlist=no,osd/libass=no --osd-duration=1800 --input-ipc-server="${tmp_dir}/mpvsocket")
}

function resume_playback_on_function ()
{
resume_playback_arguments=( "--resume-playback=yes --watch-later-options=start --save-position-on-quit=no" )
resume_playback_on_or_off="yes"
}

function resume_playback_off_function ()
{
resume_playback_arguments=( "--resume-playback=no --save-position-on-quit=no" )
unset resume_playback_on_or_off
}

function mpv_music_m4a_function ()
{
mpv_music_audio=( "--ytdl-format=22/18/b --video=no --term-osd-bar" )
mpv_music_m4a="yes"
unset mpv_music_opus
export music_download_format="140/ba"
mpv_music_arguments_function
}

function mpv_music_opus_function ()
{
mpv_music_audio=( "--ytdl-format=251/140/ba --video=no --term-osd-bar" )
unset mpv_music_m4a
mpv_music_opus="yes"
export music_download_format="251/ba"
mpv_music_arguments_function
}

function mpv_music_arguments_function ()
{
mpv_music_arguments=( "${mpv_music_audio}" --config-dir="${yt_playlist_home_dir}" --script-opts=ytdl_hook-try_ytdl_first=yes --term-playing-msg='${media-title}' --cache=yes --cache-secs=120 --demuxer-max-bytes=35M --demuxer-max-back-bytes=5M --sid=no --volume=95 --volume-max=100 --ao=pulse --msg-level=cplayer=no,ffmpeg=no,playlist=no,osd/libass=no --osd-duration=1800 --input-ipc-server="${tmp_dir}/mpvsocket")
}

function mpv_log_file_on_funciton ()
{
rm ${yt_playlist_home_dir}/mpv_log_file.txt
mpv_log_file_arguments=( --log-file=${yt_playlist_home_dir}/mpv_log_file.txt )
}

function mpv_log_file_off_funciton ()
{
unset mpv_log_file_arguments
}

function mpv_play_pause_function ()
{
	if test -f "${tmp_dir}/mpv_hd_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Play/Pause"
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Play/Pause"
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Play/Pause"
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_music_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Play/Pause"
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Play/Pause" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo cycle pause | socat - "${tmp_dir}/mpvsocket"
  fi
fi
}

function mpv_next_function ()
{
	if test -f "${tmp_dir}/mpv_hd_running"
        then
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Next track"
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Next track"
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_music_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Next track"
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Next track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-next | socat - "${tmp_dir}/mpvsocket"
  fi
fi
}

function mpv_prev_function ()
{
	if test -f "${tmp_dir}/mpv_hd_running"
        then
        echo '{ "command": ["show-text", "Not available when playing hd video." ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        fi

	if test -f "${tmp_dir}/mpv_video_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send -i "${tmp_dir}/yt-playlist_icons.jpg" "yt-playlist" "Prev track"
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_bookmark_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Prev track"
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
  fi
fi

	if test -f "${tmp_dir}/mpv_music_running"
        then
        if command -v notify-send >/dev/null
        then
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        notify-send "yt-playlist" "Prev track"
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
        else
        echo '{ "command": ["show-text", "Prev track" ] }' | socat - "${tmp_dir}/mpvsocket" >/dev/null
        echo playlist-prev | socat - "${tmp_dir}/mpvsocket"
  fi
fi
}


function title_function ()
{
        unset yt_playlist_results
        unset yt_playlist_total
        unset yt_playlist_total_number
        if [ -n "$yt_playlist_id" ]
        then
        yt_playlist_title=$(echo "$not_a_playlist_id" | cat - "${yt_playlist_home_dir}/yt-playlist_favorites.txt" "${yt_playlist_home_dir}/yt-playlist_history.txt" | grep "$yt_playlist_id" | awk '{$1=""}1' | sed 's/^[ \t]*//' | cut -b -80 | sed -n '1p' )
        yt_playlist_vanilla_title=$(echo "${yt_playlist_title}" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
        export yt_playlist_id
        export yt_playlist_title
        fi
}

function results_function ()
{
	if [[ "$yt_playlist_id" = UC* ]]
	then
        if [ -n "$yt_playlist_results" ]
	then
        clear
        else
        clear
        echo "Please wait."
        yt_playlist_results=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --compat-options no-youtube-unavailable-videos -I "$yt_video_number" --print "%(url)s Video: %(title)s" "https://www.youtube.com/channel/${yt_playlist_id}/videos" | sed '/Private video/d' | sed '/Deleted video/d' | sed 's/|//g' | tr -s '[:space:]' | nl -n"ln" -w2 -s " " 2>/dev/null)
        yt_playlist_total_number=$(echo "${yt_playlist_results}" | wc -l)
        yt_playlist_total="Channel results: $yt_playlist_total_number"
        export bookmark_video_or_music="Video:"
        clear
  fi
fi
        if [[ "$yt_playlist_id" = RD* ]]
	then
        if [ -n "$yt_playlist_results" ]
	then
        clear
        else
        clear
        echo "Please wait."
        yt_playlist_results=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --compat-options no-youtube-unavailable-videos -I "$yt_video_number" --print "%(url)s Music: %(title)s" "https://youtube.com/playlist?list=${yt_playlist_id}" | sed 's/Topic -//g' | sed '/Private video/d' | sed '/Deleted video/d' | sed 's/|//g' | tr -s '[:space:]' | nl -n"ln" -w2 -s " " 2>/dev/null)
        yt_playlist_total_number=$(echo "${yt_playlist_results}" | wc -l)
        yt_playlist_total="Playlist results: $yt_playlist_total_number"
        export bookmark_video_or_music="Music:"
        clear
  fi
fi
 	if [[ "$yt_playlist_id" = PL* ]]
	then
        if [ -n "$yt_playlist_results" ]
	then
        clear
        else
        clear
        echo "Please wait."
        yt_playlist_results=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --compat-options no-youtube-unavailable-videos -I "$yt_video_number" --print "%(url)s Video: %(title)s" "https://youtube.com/playlist?list=${yt_playlist_id}" | sed '/Private video/d' | sed '/Deleted video/d' | sed 's/|//g' | tr -s '[:space:]' | nl -n"ln" -w2 -s " " 2>/dev/null)
        yt_playlist_total_number=$(echo "${yt_playlist_results}" | wc -l)
        yt_playlist_total="Playlist results: $yt_playlist_total_number"
        export bookmark_video_or_music="Video:"
        clear
  fi
fi
 	if [[ "$yt_playlist_id" = OL* ]]
	then
        if [ -n "$yt_playlist_results" ]
	then
        clear
        else
        clear
        echo "Please wait."
        yt_playlist_results=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --compat-options no-youtube-unavailable-videos -I "$yt_video_number" --print "%(url)s Music: %(uploader)s - %(title)s" "https://youtube.com/playlist?list=${yt_playlist_id}" | sed 's/Topic -//g' | sed '/Private video/d' | sed '/Deleted video/d' | sed 's/|//g' | tr -s '[:space:]' | nl -n"ln" -w2 -s " " 2>/dev/null)
        yt_playlist_total_number=$(echo "${yt_playlist_results}" | wc -l)
        yt_playlist_total="Album results: $yt_playlist_total_number"
        export bookmark_video_or_music="Music:"
        clear
  fi
fi
}

#searchfunction

function fast_music_search_function ()
{
clear
echo "Please wait."
ytm_search_plus=$(echo "$ytm_search" | sed 's/ /+/g' )
ytm_music_search=$(yt-dlp -N4 --flat-playlist --print "%(webpage_url)s Search: ${ytm_search} - %(title)s" -I ${ytm_search_number} "https://music.youtube.com/search?q=${ytm_search_plus}&sp=EgWKAQIIAWoKEAoQAxAEEAkQBQ" | sed 's/music.//g' | sed 's/www.//g' 2>/dev/null)
if [ -n "$ytm_music_search" ]
then
echo "${ytm_music_search}" >> "${yt_playlist_home_dir}/yt-playlist_music.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_music.txt"
clear
yt_music_results_number=$(echo "${ytm_music_search}" | wc -l)
echo "A total of "$yt_music_results_number" songs found."
sleep 1
fi
}

function slow_music_search_function ()
{
clear
echo "Please wait, searching for Music."
yt_search_plus=$(echo "$ytm_search" | sed 's/ /+/g' )
yt_music_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(url)s" -I "$ytm_search_number" "https://music.youtube.com/search?q=${yt_search_plus}&sp=EgWKAQIIAWoKEAoQAxAEEAkQBQ" | sed 's/music.//g' | awk '{ORS=" "}1' 2>/dev/null)
if [ -n "$yt_music_url" ]
then
clear
echo "Please wait, getting music information."
ytm_music_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(webpage_url)s Artist: %(creator)s - %(title)s" -I 1 ${yt_music_url} | sed 's/www.//g' 2>/dev/null)
if [ -n "$ytm_music_search" ]
then
echo "${ytm_music_search}" >> "${yt_playlist_home_dir}/yt-playlist_music.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_music.txt"
clear
yt_music_results_number=$(echo "${ytm_music_search}" | wc -l)
echo "A total of "$yt_music_results_number" songs found."
sleep 1
fi
fi
}

function ytm_album_search_function ()
{
clear
echo "Please wait, searching for YTMusic Ablum."
ytm_search_plus=$(echo "$ytm_search" | sed 's/ /+/g' )
ytm_album_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(webpage_url)s" -I "$ytm_search_number" "https://music.youtube.com/search?q=${ytm_search_plus}&sp=EgWKAQIYAWoKEAoQAxAEEAkQBQ" | awk '{ORS=" "}1' 2>/dev/null)
if [ -n "$ytm_album_url" ]
then
clear
echo "Please wait, getting Album information."
ytm_album_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Album: %(channel)s - %(playlist_title)s" -I 1 ${ytm_album_url} | sed 's/YouTube Music/YTMusic/g' | sed 's/Topic -//g' | sed 's/Album -//g' | tr -s '[:space:]' 2>/dev/null)
if [ -n "$ytm_album_search" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${ytm_album_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "YTMusic Album Search: $ytm_search" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
fi
}

function ytm_playlist_search_[1]_function ()
{
clear
echo "Please wait, searching for YTMusic Playlist."
ytm_search_plus=$(echo "$ytm_search" | sed 's/ /+/g' )
ytm_playlist_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(webpage_url)s" -I "$ytm_search_number" "https://music.youtube.com/search?q=${ytm_search_plus}&sp=EgeKAQQoADgBagwQAxAJEAQQDhAKEAU" | awk '{ORS=" "}1' 2>/dev/null)
if [ -n "$ytm_playlist_url" ]
then
clear
echo "Please wait, getting Playlist information."
ytm_playlist_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Playlist: %(playlist_title)s" -I 1 ${ytm_playlist_url} | sed 's/YouTube Music/YTMusic/g' | sed 's/Topic -//g' | tr -s '[:space:]' 2>/dev/null)
if [ -n "$ytm_playlist_search" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${ytm_playlist_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "YTMusic Playlist search [1]: $ytm_search" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
fi
}

function ytm_playlist_search_[2]_function ()
{
clear
echo "Please wait, searching for YTMusic Playlist."
ytm_search_plus=$(echo "$ytm_search" | sed 's/ /+/g' )
ytm_playlist_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(webpage_url)s" -I "$ytm_search_number" "https://music.youtube.com/search?q=${ytm_search_plus}&sp=EgeKAQQoAEABagoQChADEAQQCRAF" | awk '{ORS=" "}1' 2>/dev/null)
if [ -n "$ytm_playlist_url" ]
then
clear
echo "Please wait, getting Playlist information."
ytm_playlist_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Playlist: %(playlist_title)s" -I 1 ${ytm_playlist_url} | sed 's/YouTube Music/YTMusic/g' | sed 's/Topic -//g' | tr -s '[:space:]' 2>/dev/null)
if [ -n "$ytm_playlist_search" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${ytm_playlist_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "YTMusic Playlist search [2]: $ytm_search" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
fi
}

function paste_playlist_url_function ()
{
clear
echo "Please wait."
if [[ "${yt_paste_url}" = *OLAK5uy* ]]
then
yt_paste_playlist_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Album: %(playlist_title)s" -I 1 ${yt_paste_url} | sed 's/YouTube Music/YTMusic/g' | sed 's/Topic -//g' | sed 's/Album -//g' | tr -s '[:space:]' 2>/dev/null)
else
yt_paste_playlist_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Playlist: %(playlist_uploader)s - %(playlist_title)s" -I 1 ${yt_paste_url} | sed 's/YouTube Music/YTMusic/g' | sed 's/Topic -//g' | sed 's/Album -//g' | tr -s '[:space:]' 2>/dev/null)
fi
if [ -n "$yt_paste_playlist_url" ]
then
yt_playlist_id=$(echo "${yt_paste_playlist_url}" | awk '{print $1}')
yt_paste_playlist_title=$(echo "${yt_paste_playlist_url}" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${yt_paste_playlist_url}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "Paste Playlist url:" "${yt_paste_url}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
}

function paste_channel_url_function ()
{
clear
echo "Please wait."
if [[ "${yt_paste_url}" = *@* ]]
then
yt_paste_channel_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(playlist_id)s Channel: %(playlist_uploader)s" -I 1 ${yt_paste_url} 2>/dev/null)
else
yt_paste_channel_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(channel_id)s Channel: %(playlist_uploader)s" -I 1 ${yt_paste_url} 2>/dev/null)
fi
if [ -n "$yt_paste_channel_url" ]
then
yt_playlist_id=$(echo "${yt_paste_channel_url}" | awk '{print $1}')
yt_paste_channel_title=$(echo "${yt_paste_channel_url}" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${yt_paste_channel_url}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "Paste Channel url:" "${yt_paste_url}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
}

function paste_video_url_function ()
{
clear
echo "Please wait."
yt_paste_video_url=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(webpage_url)s Video: %(channel)s - %(title)s" -I 1 ${yt_paste_url} | sed 's/music.//' 2>/dev/null)
if [ -n "$yt_paste_video_url" ]
then
yt_paste_video_check_url=$(echo "$yt_paste_video_url" | awk '{print $1'})
if grep -q "$yt_paste_video_check_url" "${yt_playlist_home_dir}/yt-playlist_bookmark.txt" >/dev/null
then
echo "Already saved to bookmarks."
sleep 1
else
yt_paste_video_title=$(echo "${yt_paste_video_url}" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
echo "${yt_paste_video_url}" >> "${yt_playlist_home_dir}/yt-playlist_bookmark.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_bookmark.txt"
clear
echo "Saved to the bookmark library."
echo "$yt_paste_video_title"
sleep 3
fi
fi
}

function yt_playlist_search_function ()
{
clear
echo "Please wait."
yt_search_plus=$(echo "$yt_search" | sed 's/ /+/g' )
yt_playlist_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(id)s Playlist: %(title)s" -I "$yt_search_number" "https://youtube.com/search?q=${yt_search_plus}&sp=EgIQAw%253D%253D" | sed 's/YouTube Music/YTMusic/g' | sed 's/|//g' | sed 's/(//g' | sed 's/)//g' 2>/dev/null)
if [ -n "$yt_playlist_search" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${yt_playlist_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "YT Playlist search: ${yt_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
}

function yt_channel_search_function ()
{
clear
echo "Please wait."
yt_search_plus=$(echo "$yt_search" | sed 's/ /+/g' )
yt_channel_search=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(channel_id)s Channel: %(channel)s" -I "$yt_search_number" "https://youtube.com/search?q=${yt_search_plus}&sp=EgIQAg%253D%253D" 2>/dev/null)
if [ -n "$yt_channel_search" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${yt_channel_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "YT Channel search: ${yt_search}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
}

function get_channel_playlist_function ()
{
clear
echo "Please wait."
get_channel_playlist=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(id)s Playlist: %(playlist_uploader)s - %(title)s" -I "$yt_search_number" "https://www.youtube.com/channel/${yt_playlist_id}/playlists?view=1" | sed 's/YouTube Music/YTMusic/g' 2>/dev/null)
if [ -z "$get_channel_playlist" ]
then
unset get_channel_playlist
get_channel_playlist=$(yt-dlp -N4 --no-warnings --quiet --flat-playlist --print "%(id)s Playlist: %(playlist_uploader)s - %(title)s" -I "$yt_search_number" "https://www.youtube.com/channel/${yt_playlist_id}/playlists" | sed 's/YouTube Music/YTMusic/g' 2>/dev/null)
fi
if [ -n "$get_channel_playlist" ]
then
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "${get_channel_playlist}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "==============================" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
echo "7807897890789078907807" "Get Channel playlists: ${yt_playlist_vanilla_title}" >> "${yt_playlist_home_dir}/yt-playlist_history.txt"
sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_history.txt"
fi
}

function help_function ()
{
echo "Help menu:              -h or --help"
echo "Version:                -v or --version"
echo "Play/Pause              --play_pause"
echo "Next track              --next"
echo "Prev track              --prev"
echo "Desktop and terminal"
echo "notifications get"
echo "artist and title        --title"
echo "Download when playing" 
echo "Audio"
echo "Download audio          --download_audio opus"
echo "                        --download_audio m4a"
echo "Download video          --download_video mp4"
echo "Import Google takeout:  --import" 
echo "Suppprted file types:"
echo "subscriptions.csv" 
echo "music-library-songs.csv"     
echo 'Example: "yt-playlist --import subscriptions.csv"'
echo ""
echo "debug"
echo 'At Main menu type: "debug"'
echo "Internet status or mpv log file"
echo "mpv log file is saved at"
echo "~/.config/yt-playlist/mpv_log_file.txt"
echo""
echo "When playing Audio"
echo "Right arrow for FF"
echo "Left arrow for RR"
echo "Spacebar to pause"
echo '">" next track'
echo '"<" prev track'
echo "press enter for next track"
echo '"shift-q" to save playback position and quit'
echo '"q" quit without saving playback position'
echo '"shift-i" info'
echo 'Save to favorites    "f"'
echo 'Save to Bookmarks    "b"'
echo 'Show sleep timer     "s"'
echo 'Download audio       "d"'
echo 'Download video "shift-d"'
echo 'Show date and time   "t"'
echo 'Artist & title "shift-t"'
echo ""
echo "Select Video/Music"
echo 'Select all "ctrl-a"'
echo 'Deselect all "ctrl-d"'
echo 'Cancel "ctrl-c"'
echo "Tab key to select lines"
echo "Enter select one line"
echo ""
echo "Play SD menu"
echo "Sleep timer yes"
echo "Bookmarks yes"
echo "Download Audio yes"
echo "Download Video yes"
echo "Resume playback yes"
echo "Show date and time yes"
echo "Title notifications yes"
echo "FF yes"
echo "RR yes"
echo "Pause yes"
echo "Next video yes"
echo "Prev video yes"
echo ""
echo "Play SD bookmark menu"
echo "Sleep timer yes"
echo "Bookmarks no"
echo "Download Audio yes"
echo "Download Video yes"
echo "Resume playback yes"
echo "Show date and time yes"
echo "Title notifications yes"
echo "FF yes"
echo "RR yes"
echo "Pause yes"
echo "Next video yes"
echo "Prev video yes"
echo ""
echo "Play YTMusic menu"
echo "Sleep timer yes"
echo "Bookmarks no"
echo "Download Audio yes"
echo "Download Video no"
echo "Resume playback no"
echo "Show date and time yes"
echo "Title notifications yes"
echo "FF yes"
echo "RR yes"
echo "Pause yes"
echo "Next song yes"
echo "Prev song yes"
}

not_a_playlist_id="7807897890789078907807 Not a channel/playlist/album.
"

	if [[ "$external_arguments1" = "--import" ]]
	then
	if [[ "$external_arguments2" = *subscriptions.csv ]]
        then
        unset import_take_out
        import_take_out=$(cat $external_arguments2 | sed '/^$/d' | sed '1d' | sed 's/,/ /' | sed 's/,/ /' | awk '{print $1,"Channel:",$3,$4,$5,$6,$7,$8,$9}')
        import_take_out_number=$(echo "$import_take_out" | wc -l)
        echo "$import_take_out" >> ${yt_playlist_home_dir}/yt-playlist_favorites.txt
        sed -i'' '/^$/d' ${yt_playlist_home_dir}/yt-playlist_favorites.txt
        echo "A total of "$import_take_out_number" channels were imported to favorites"
        exit
        else
	if [[ "$external_arguments2" = *music-library-songs.csv ]]
        then
        unset import_take_out
        import_take_out=$(cat $external_arguments2 | sed '/^$/d' | sed '1d' | sed 's/,/ /' | sed 's/music.//' | awk '{print $1,"YTMusic:",$3,$4,$5,$6,$7,$8,$9}')
        import_take_out_number=$(echo "$import_take_out" | wc -l)
        echo "$import_take_out" >> "${yt_playlist_home_dir}/yt-playlist_music.txt"
        sed -i'' '/^$/d' "${yt_playlist_home_dir}/yt-playlist_music.txt"
        echo "A total of "$import_take_out_number" songs were imported to the music menu."
        exit
        else
        echo "Import Google takeout." 
        echo 'You can import "subscriptions.csv" and "music-library-songs.csv".'
        echo 'Example: "yt-playlist --import subscriptions.csv"'
        exit
    fi
  fi
fi

	if [[ "$external_arguments1" = "-h" ]]
	then
        help_function
        exit
        fi

	if [[ "$external_arguments1" = "--help" ]]
	then
        help_function
        exit
        fi

	if [[ "$external_arguments1" = "--version" ]]
	then
        echo "$version"
	exit
	fi

	if [[ "$external_arguments1" = "-v" ]]
	then
        echo "$version"
	exit
	fi

        if [[ "$external_arguments1" = "--date_time" ]]
	then
        show_date_time_function
	exit
        fi

        if [[ "$external_arguments1" = "--favorites" ]]
	then
        favorites_function
	exit
        fi

        if [[ "$external_arguments1" = "--bookmark" ]]
	then
        bookmark_function
	exit
        fi

        if [[ "$external_arguments1" = "--sleep_time" ]]
	then
	show_count_down_time_function
	exit
        fi

        if [[ "$external_arguments1" = "--download_audio" ]]
	then
        if [[ "$external_arguments2" = "opus" ]]
	then
        music_download_format="251/ba"
        audio_download_format="251/ba"
	download_audio_function
        exit
        else
        if [[ "$external_arguments2" = "m4a" ]]
	then
        music_download_format="140/ba"
        audio_download_format="140/ba"
	download_audio_function
        exit
        else
        if [[ "$external_arguments2" = "yt_playlist_audio" ]]
	then
        download_audio_function
        exit
      fi
    fi
  fi
fi

        if [[ "$external_arguments1" = "--download_video" ]]
	then
        if [[ "$external_arguments2" = "mp4" ]]
	then
        video_download_format="22/18/b"
	download_video_function
        exit
        else
        if [[ "$external_arguments2" = "yt_playlist_video" ]]
	then
        download_video_function
        exit
    fi
  fi
fi


        if [[ "$external_arguments1" = "--play_pause" ]]
	then
        mpv_play_pause_function
        exit
        fi

        if [[ "$external_arguments1" = "--next" ]]
	then
        mpv_next_function
        exit
        fi

        if [[ "$external_arguments1" = "--prev" ]]
	then
        mpv_prev_function
        exit
        fi

        if [[ "$external_arguments1" = "--title" ]]
	then
        title_notification_function
        exit
        fi

	yt_playlist_start_function
